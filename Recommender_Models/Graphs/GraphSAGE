{
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/Frederik-Roeckle/xwines_recom/blob/master/Recommender_Models/Graphs/GraphSAGE\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 1,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "2dNKY2oZyj27",
        "outputId": "10fa78db-9a38-4ea5-8af3-c6b22352a0fd"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Looking in indexes: https://download.pytorch.org/whl/cu124\n",
            "Requirement already satisfied: torch in /usr/local/lib/python3.11/dist-packages (2.6.0+cu124)\n",
            "Requirement already satisfied: torchvision in /usr/local/lib/python3.11/dist-packages (0.21.0+cu124)\n",
            "Requirement already satisfied: torchaudio in /usr/local/lib/python3.11/dist-packages (2.6.0+cu124)\n",
            "Requirement already satisfied: filelock in /usr/local/lib/python3.11/dist-packages (from torch) (3.18.0)\n",
            "Requirement already satisfied: typing-extensions>=4.10.0 in /usr/local/lib/python3.11/dist-packages (from torch) (4.13.2)\n",
            "Requirement already satisfied: networkx in /usr/local/lib/python3.11/dist-packages (from torch) (3.4.2)\n",
            "Requirement already satisfied: jinja2 in /usr/local/lib/python3.11/dist-packages (from torch) (3.1.6)\n",
            "Requirement already satisfied: fsspec in /usr/local/lib/python3.11/dist-packages (from torch) (2025.3.2)\n",
            "Requirement already satisfied: nvidia-cuda-nvrtc-cu12==12.4.127 in /usr/local/lib/python3.11/dist-packages (from torch) (12.4.127)\n",
            "Requirement already satisfied: nvidia-cuda-runtime-cu12==12.4.127 in /usr/local/lib/python3.11/dist-packages (from torch) (12.4.127)\n",
            "Requirement already satisfied: nvidia-cuda-cupti-cu12==12.4.127 in /usr/local/lib/python3.11/dist-packages (from torch) (12.4.127)\n",
            "Requirement already satisfied: nvidia-cudnn-cu12==9.1.0.70 in /usr/local/lib/python3.11/dist-packages (from torch) (9.1.0.70)\n",
            "Requirement already satisfied: nvidia-cublas-cu12==12.4.5.8 in /usr/local/lib/python3.11/dist-packages (from torch) (12.4.5.8)\n",
            "Requirement already satisfied: nvidia-cufft-cu12==11.2.1.3 in /usr/local/lib/python3.11/dist-packages (from torch) (11.2.1.3)\n",
            "Requirement already satisfied: nvidia-curand-cu12==10.3.5.147 in /usr/local/lib/python3.11/dist-packages (from torch) (10.3.5.147)\n",
            "Requirement already satisfied: nvidia-cusolver-cu12==11.6.1.9 in /usr/local/lib/python3.11/dist-packages (from torch) (11.6.1.9)\n",
            "Requirement already satisfied: nvidia-cusparse-cu12==12.3.1.170 in /usr/local/lib/python3.11/dist-packages (from torch) (12.3.1.170)\n",
            "Requirement already satisfied: nvidia-cusparselt-cu12==0.6.2 in /usr/local/lib/python3.11/dist-packages (from torch) (0.6.2)\n",
            "Requirement already satisfied: nvidia-nccl-cu12==2.21.5 in /usr/local/lib/python3.11/dist-packages (from torch) (2.21.5)\n",
            "Requirement already satisfied: nvidia-nvtx-cu12==12.4.127 in /usr/local/lib/python3.11/dist-packages (from torch) (12.4.127)\n",
            "Requirement already satisfied: nvidia-nvjitlink-cu12==12.4.127 in /usr/local/lib/python3.11/dist-packages (from torch) (12.4.127)\n",
            "Requirement already satisfied: triton==3.2.0 in /usr/local/lib/python3.11/dist-packages (from torch) (3.2.0)\n",
            "Requirement already satisfied: sympy==1.13.1 in /usr/local/lib/python3.11/dist-packages (from torch) (1.13.1)\n",
            "Requirement already satisfied: mpmath<1.4,>=1.1.0 in /usr/local/lib/python3.11/dist-packages (from sympy==1.13.1->torch) (1.3.0)\n",
            "Requirement already satisfied: numpy in /usr/local/lib/python3.11/dist-packages (from torchvision) (2.0.2)\n",
            "Requirement already satisfied: pillow!=8.3.*,>=5.3.0 in /usr/local/lib/python3.11/dist-packages (from torchvision) (11.2.1)\n",
            "Requirement already satisfied: MarkupSafe>=2.0 in /usr/local/lib/python3.11/dist-packages (from jinja2->torch) (3.0.2)\n",
            "Looking in links: https://data.pyg.org/whl/torch-2.6.0+cu124.html\n",
            "Requirement already satisfied: pyg-lib==0.4.0+pt26cu124 in /usr/local/lib/python3.11/dist-packages (0.4.0+pt26cu124)\n",
            "Requirement already satisfied: torch-scatter==2.1.2+pt26cu124 in /usr/local/lib/python3.11/dist-packages (2.1.2+pt26cu124)\n",
            "Requirement already satisfied: torch-sparse==0.6.18+pt26cu124 in /usr/local/lib/python3.11/dist-packages (0.6.18+pt26cu124)\n",
            "Requirement already satisfied: torch-cluster==1.6.3+pt26cu124 in /usr/local/lib/python3.11/dist-packages (1.6.3+pt26cu124)\n",
            "Requirement already satisfied: torch-spline-conv==1.2.2+pt26cu124 in /usr/local/lib/python3.11/dist-packages (1.2.2+pt26cu124)\n",
            "Requirement already satisfied: scipy in /usr/local/lib/python3.11/dist-packages (from torch-sparse==0.6.18+pt26cu124) (1.15.3)\n",
            "Requirement already satisfied: numpy<2.5,>=1.23.5 in /usr/local/lib/python3.11/dist-packages (from scipy->torch-sparse==0.6.18+pt26cu124) (2.0.2)\n",
            "Requirement already satisfied: torch-geometric==2.5.0 in /usr/local/lib/python3.11/dist-packages (2.5.0)\n",
            "Requirement already satisfied: tqdm in /usr/local/lib/python3.11/dist-packages (from torch-geometric==2.5.0) (4.67.1)\n",
            "Requirement already satisfied: numpy in /usr/local/lib/python3.11/dist-packages (from torch-geometric==2.5.0) (2.0.2)\n",
            "Requirement already satisfied: scipy in /usr/local/lib/python3.11/dist-packages (from torch-geometric==2.5.0) (1.15.3)\n",
            "Requirement already satisfied: fsspec in /usr/local/lib/python3.11/dist-packages (from torch-geometric==2.5.0) (2025.3.2)\n",
            "Requirement already satisfied: jinja2 in /usr/local/lib/python3.11/dist-packages (from torch-geometric==2.5.0) (3.1.6)\n",
            "Requirement already satisfied: aiohttp in /usr/local/lib/python3.11/dist-packages (from torch-geometric==2.5.0) (3.11.15)\n",
            "Requirement already satisfied: requests in /usr/local/lib/python3.11/dist-packages (from torch-geometric==2.5.0) (2.32.3)\n",
            "Requirement already satisfied: pyparsing in /usr/local/lib/python3.11/dist-packages (from torch-geometric==2.5.0) (3.2.3)\n",
            "Requirement already satisfied: scikit-learn in /usr/local/lib/python3.11/dist-packages (from torch-geometric==2.5.0) (1.6.1)\n",
            "Requirement already satisfied: psutil>=5.8.0 in /usr/local/lib/python3.11/dist-packages (from torch-geometric==2.5.0) (5.9.5)\n",
            "Requirement already satisfied: aiohappyeyeballs>=2.3.0 in /usr/local/lib/python3.11/dist-packages (from aiohttp->torch-geometric==2.5.0) (2.6.1)\n",
            "Requirement already satisfied: aiosignal>=1.1.2 in /usr/local/lib/python3.11/dist-packages (from aiohttp->torch-geometric==2.5.0) (1.3.2)\n",
            "Requirement already satisfied: attrs>=17.3.0 in /usr/local/lib/python3.11/dist-packages (from aiohttp->torch-geometric==2.5.0) (25.3.0)\n",
            "Requirement already satisfied: frozenlist>=1.1.1 in /usr/local/lib/python3.11/dist-packages (from aiohttp->torch-geometric==2.5.0) (1.6.0)\n",
            "Requirement already satisfied: multidict<7.0,>=4.5 in /usr/local/lib/python3.11/dist-packages (from aiohttp->torch-geometric==2.5.0) (6.4.3)\n",
            "Requirement already satisfied: propcache>=0.2.0 in /usr/local/lib/python3.11/dist-packages (from aiohttp->torch-geometric==2.5.0) (0.3.1)\n",
            "Requirement already satisfied: yarl<2.0,>=1.17.0 in /usr/local/lib/python3.11/dist-packages (from aiohttp->torch-geometric==2.5.0) (1.20.0)\n",
            "Requirement already satisfied: MarkupSafe>=2.0 in /usr/local/lib/python3.11/dist-packages (from jinja2->torch-geometric==2.5.0) (3.0.2)\n",
            "Requirement already satisfied: charset-normalizer<4,>=2 in /usr/local/lib/python3.11/dist-packages (from requests->torch-geometric==2.5.0) (3.4.2)\n",
            "Requirement already satisfied: idna<4,>=2.5 in /usr/local/lib/python3.11/dist-packages (from requests->torch-geometric==2.5.0) (3.10)\n",
            "Requirement already satisfied: urllib3<3,>=1.21.1 in /usr/local/lib/python3.11/dist-packages (from requests->torch-geometric==2.5.0) (2.4.0)\n",
            "Requirement already satisfied: certifi>=2017.4.17 in /usr/local/lib/python3.11/dist-packages (from requests->torch-geometric==2.5.0) (2025.4.26)\n",
            "Requirement already satisfied: joblib>=1.2.0 in /usr/local/lib/python3.11/dist-packages (from scikit-learn->torch-geometric==2.5.0) (1.5.0)\n",
            "Requirement already satisfied: threadpoolctl>=3.1.0 in /usr/local/lib/python3.11/dist-packages (from scikit-learn->torch-geometric==2.5.0) (3.6.0)\n"
          ]
        }
      ],
      "source": [
        "!pip install torch torchvision torchaudio --index-url https://download.pytorch.org/whl/cu124\n",
        "\n",
        "!pip install pyg-lib==0.4.0+pt26cu124 \\\n",
        "            torch-scatter==2.1.2+pt26cu124 \\\n",
        "            torch-sparse==0.6.18+pt26cu124 \\\n",
        "            torch-cluster==1.6.3+pt26cu124 \\\n",
        "            torch-spline-conv==1.2.2+pt26cu124 \\\n",
        "            -f https://data.pyg.org/whl/torch-2.6.0+cu124.html\n",
        "\n",
        "!pip install torch-geometric==2.5.0"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 2,
      "metadata": {
        "id": "hekxkOgH6PGq"
      },
      "outputs": [],
      "source": [
        "from google.colab import drive\n",
        "import torch\n",
        "import torch.nn as nn\n",
        "import torch.nn.functional as F\n",
        "from torch_geometric.data import HeteroData\n",
        "from torch_geometric.nn import SAGEConv, to_hetero, GATv2Conv\n",
        "from torch_geometric.loader import LinkNeighborLoader\n",
        "from sklearn.preprocessing import LabelEncoder, StandardScaler\n",
        "import pandas as pd\n",
        "from tqdm import tqdm\n",
        "import pathlib as pl\n",
        "from sentence_transformers import SentenceTransformer\n",
        "import math\n",
        "import copy\n",
        "import datetime"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 3,
      "metadata": {
        "id": "qQYOcJS8pKET",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "b2e46f2b-43dd-460c-9622-78225444e939"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "PyTorch version: 2.6.0+cu124\n",
            "CUDA available: True\n",
            "CUDA version: 12.4\n"
          ]
        }
      ],
      "source": [
        "# Get PyTorch version\n",
        "pytorch_version = torch.__version__\n",
        "print(f\"PyTorch version: {pytorch_version}\")\n",
        "\n",
        "# Check if CUDA is available\n",
        "cuda_available = torch.cuda.is_available()\n",
        "print(f\"CUDA available: {cuda_available}\")\n",
        "\n",
        "# Get CUDA version (if available)\n",
        "if cuda_available:\n",
        "    cuda_version = torch.version.cuda\n",
        "    print(f\"CUDA version: {cuda_version}\")\n",
        "\n",
        "device = torch.device('cuda' if torch.cuda.is_available() else 'cpu')\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 4,
      "metadata": {
        "id": "0gnMcwEe7zPA"
      },
      "outputs": [],
      "source": [
        "csv_wines = pl.Path(\"/content/drive/MyDrive/01_Master/WebMiningProject/XWines_Full_100K_wines.csv\")\n",
        "csv_training = pl.Path(\"/content/drive/MyDrive/01_Master/WebMiningProject/trainset.csv\")"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 5,
      "metadata": {
        "id": "R9iF7ZF_6Sfp",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "90e35f08-fbb5-4dbd-97a2-adcbe3bcb9f1"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "<ipython-input-5-98286d1bc806>:15: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame.\n",
            "Try using .loc[row_indexer,col_indexer] = value instead\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  wines['WineID'] = wine_encoder.fit_transform(wines['WineID'])\n"
          ]
        }
      ],
      "source": [
        "reviews = pd.read_csv(csv_training)\n",
        "\n",
        "# for shorter training time prototyping reduce trainset size\n",
        "# split = 0.3\n",
        "# reviews = reviews.loc[reviews.index < len(reviews) * split]\n",
        "\n",
        "all_wines = pd.read_csv(csv_wines)\n",
        "\n",
        "wines = all_wines.loc[all_wines[\"WineID\"].isin(reviews[\"WineID\"])]\n",
        "\n",
        "# 2. Encode categorical IDs\n",
        "user_encoder = LabelEncoder()\n",
        "wine_encoder = LabelEncoder()\n",
        "reviews['UserID'] = user_encoder.fit_transform(reviews['UserID'])\n",
        "wines['WineID'] = wine_encoder.fit_transform(wines['WineID'])\n",
        "reviews['WineID'] = wine_encoder.transform(reviews['WineID'])"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 6,
      "metadata": {
        "id": "_ZVKJ3sAXIJj",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 176,
          "referenced_widgets": [
            "5eeb111b618149f48eb5e9bd6b466bef",
            "341e4e21d92f49f4a4798d4deb8d6b06",
            "fb6e330babe6469ea2270f7dc5d20a76",
            "8f0c8ff2004e4ec796d0430848e08ef4",
            "22b6b0f6ccdb406b8469b599b24e74e1",
            "79bb0a1a883a49eb8ad6843d29ca596c",
            "22361464297545febb8b302a1761541f",
            "9fa89f450dff40e2b8c0c0b3134dd393",
            "6fdf6079a50d4e6da0b14aa788d0601d",
            "09834038938e4de486b13ffa43a74265",
            "28c8f92895af4222b05d5a9bfc00e5cb"
          ]
        },
        "outputId": "82623394-09c4-407f-ef75-b2b8f263b559"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.11/dist-packages/huggingface_hub/utils/_auth.py:94: UserWarning: \n",
            "The secret `HF_TOKEN` does not exist in your Colab secrets.\n",
            "To authenticate with the Hugging Face Hub, create a token in your settings tab (https://huggingface.co/settings/tokens), set it as secret in your Google Colab and restart your session.\n",
            "You will be able to reuse this secret in all of your notebooks.\n",
            "Please note that authentication is recommended but still optional to access public models or datasets.\n",
            "  warnings.warn(\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "Batches:   0%|          | 0/3089 [00:00<?, ?it/s]"
            ],
            "application/vnd.jupyter.widget-view+json": {
              "version_major": 2,
              "version_minor": 0,
              "model_id": "5eeb111b618149f48eb5e9bd6b466bef"
            }
          },
          "metadata": {}
        }
      ],
      "source": [
        "def compute_grape_embeddings(wine_df):\n",
        "  model = SentenceTransformer('all-MiniLM-L6-v2')\n",
        "  grape_sentences = wine_df['Grapes'].fillna(\"\").tolist()\n",
        "  grape_embeddings = model.encode(grape_sentences, show_progress_bar=True)\n",
        "\n",
        "  # Convert to tensor\n",
        "  return torch.tensor(grape_embeddings, dtype=torch.float)\n",
        "\n",
        "grape_tensor = compute_grape_embeddings(wines)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 22,
      "metadata": {
        "id": "LAoIqwMzDdhR",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "cf620277-50df-45ec-cfd4-e37af397f09f"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array([[ 8.68222297e-02,  1.77961218e+00,  2.13078121e-01,\n",
              "         8.68222297e-02],\n",
              "       [ 3.47530106e-01, -5.80055021e-04,  4.63838431e-01,\n",
              "         3.47530106e-01],\n",
              "       [ 3.26124617e-01,  8.55582788e-02, -8.80278512e-02,\n",
              "         3.26124617e-01],\n",
              "       ...,\n",
              "       [ 4.83098202e-01, -3.45133390e-01,  9.56030573e-03,\n",
              "         4.83098202e-01],\n",
              "       [-3.15654362e-01,  6.02388281e-01, -9.42360368e-02,\n",
              "        -3.15654362e-01],\n",
              "       [-8.72582755e-01, -2.01569501e-01,  1.18972338e+00,\n",
              "        -8.72582755e-01]])"
            ]
          },
          "metadata": {},
          "execution_count": 22
        }
      ],
      "source": [
        "# User node features\n",
        "global_rating_average = reviews[\"Rating\"].mean()\n",
        "user_rating_average = reviews.groupby(\"UserID\")[\"Rating\"].mean()\n",
        "user_rating_average.name = \"user_rating_average\"\n",
        "\n",
        "user_rating_count = reviews.groupby(\"UserID\")[\"Rating\"].count()\n",
        "user_rating_count.name = \"user_rating_count\"\n",
        "\n",
        "user_rating_std = reviews.groupby(\"UserID\")[\"Rating\"].std()\n",
        "user_rating_std.name = \"user_rating_std\"\n",
        "\n",
        "user_rating_bias = user_rating_average - global_rating_average\n",
        "user_rating_bias.name = \"user_rating_bias\"\n",
        "\n",
        "user_df = pd.concat([user_rating_average, user_rating_count, user_rating_std, user_rating_bias], axis=1)\n",
        "\n",
        "# some users only have one rating, std then becomes nan leading to nan at loss computation\n",
        "user_df = user_df.fillna(0)\n",
        "\n",
        "# use scaler later for new user nodes\n",
        "user_feature_scaler = StandardScaler()\n",
        "user_df = user_feature_scaler.fit_transform(user_df[['user_rating_average', 'user_rating_count', 'user_rating_std', 'user_rating_bias']])\n",
        "user_df"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 23,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "Kquv4Fim6VRU",
        "outputId": "86f91675-ae14-4894-f3e8-0273d57a0080"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "wine metadata dimensions: (98825, 98)\n"
          ]
        }
      ],
      "source": [
        "# 3. Build Heterogeneous Graph\n",
        "data = HeteroData()\n",
        "data['user'].num_nodes = reviews['UserID'].nunique()\n",
        "data['wine'].num_nodes = reviews['WineID'].nunique()\n",
        "\n",
        "data['user', 'rates', 'wine'].edge_index = torch.tensor([\n",
        "    reviews['UserID'].values,\n",
        "    reviews['WineID'].values\n",
        "], dtype=torch.long)\n",
        "\n",
        "# Add ratings as edge weights\n",
        "data['user', 'rates', 'wine'].edge_attr = torch.tensor(reviews['Rating'].values, dtype=torch.float).unsqueeze(1)\n",
        "\n",
        "# Dummy features for users as no metadata is known\n",
        "# Todo: Could encode average ratings\n",
        "# data['user'].x = torch.ones((data['user'].num_nodes, 1))\n",
        "data['user'].x = torch.tensor(user_df, dtype=torch.float)\n",
        "\n",
        "include_later = r\"\"\"\n",
        "# Assuming wines has columns 'WineID', 'WineryID', 'RegionID'\n",
        "\n",
        "# Winery nodes\n",
        "data['winery'].num_nodes = wines['WineryID'].nunique()\n",
        "data['region'].num_nodes = wines['RegionID'].nunique()\n",
        "\n",
        "# Create mapping from ID to index\n",
        "winery_id_map = {id_: i for i, id_ in enumerate(wines['WineryID'].unique())}\n",
        "region_id_map = {id_: i for i, id_ in enumerate(wines['RegionID'].unique())}\n",
        "\n",
        "# Apply mapping\n",
        "mapped_winery_ids = wines['WineryID'].map(winery_id_map).values\n",
        "mapped_region_ids = wines['RegionID'].map(region_id_map).values\n",
        "\n",
        "# Existing wine_ids (assumed to already be zero-based)\n",
        "wine_ids = wines['WineID'].values\n",
        "\n",
        "data['wine', 'from_winery', 'winery'].edge_index = torch.tensor([\n",
        "    wine_ids,\n",
        "    mapped_winery_ids\n",
        "], dtype=torch.long)\n",
        "\n",
        "data['wine', 'from_region', 'region'].edge_index = torch.tensor([\n",
        "    wine_ids,\n",
        "    mapped_region_ids\n",
        "], dtype=torch.long)\n",
        "\n",
        "\n",
        "# Dummy features for new nodes\n",
        "data['winery'].x = torch.ones((data['winery'].num_nodes, 1))\n",
        "data['region'].x = torch.ones((data['region'].num_nodes, 1))\n",
        "\n",
        "data['winery', 'produces', 'wine'].edge_index = data['wine', 'from_winery', 'winery'].edge_index[[1, 0]]\n",
        "data['region', 'origin_of', 'wine'].edge_index = data['wine', 'from_region', 'region'].edge_index[[1, 0]]\n",
        "\"\"\"\n",
        "\n",
        "def compute_standard_wine_features(wine_df):\n",
        "  selected_columns = ['Type', 'Elaborate', 'Body', 'Acidity', 'Country']#, 'RegionID' , 'WineryID']\n",
        "  wine_metadata = wine_df.set_index('WineID')[selected_columns]\n",
        "  wine_metadata_encoded = pd.get_dummies(wine_metadata).astype(float)\n",
        "\n",
        "\n",
        "# Use selected wine metadata as features\n",
        "selected_columns = ['Type', 'Elaborate', 'Body', 'Acidity', 'Country']#, 'RegionID' , 'WineryID']\n",
        "wine_metadata = wines.set_index('WineID')[selected_columns]\n",
        "wine_metadata_encoded = pd.get_dummies(wine_metadata).astype(float)\n",
        "training_wine_metadata_columns = wine_metadata_encoded.columns\n",
        "\n",
        "# Align features to the wine node index order\n",
        "aligned_wine_feats = wine_metadata_encoded.reindex(range(data['wine'].num_nodes)).fillna(0).values\n",
        "# data['wine'].x = torch.tensor(aligned_wine_feats, dtype=torch.float)\n",
        "\n",
        "# Concatenate features with grape features\n",
        "structured_tensor = torch.tensor(aligned_wine_feats, dtype=torch.float)\n",
        "combined_features = torch.cat([grape_tensor, structured_tensor], dim=1)\n",
        "data['wine'].x = combined_features\n"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "aligned_wine_feats.shape"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "1B2iPG9OcYVu",
        "outputId": "8afac8c2-5d8e-45a6-e9f8-8a0c7855c9f1"
      },
      "execution_count": 27,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "(98825, 98)"
            ]
          },
          "metadata": {},
          "execution_count": 27
        }
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 25,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "iJj5mEKya4en",
        "outputId": "b4ee2704-53fd-4d67-d3f0-c734a3a1b888"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "HeteroData(\n",
              "  user={\n",
              "    num_nodes=1056035,\n",
              "    x=[1056035, 4],\n",
              "  },\n",
              "  wine={\n",
              "    num_nodes=98825,\n",
              "    x=[98825, 482],\n",
              "  },\n",
              "  (user, rates, wine)={\n",
              "    edge_index=[2, 16917894],\n",
              "    edge_attr=[16917894, 1],\n",
              "  }\n",
              ")"
            ]
          },
          "metadata": {},
          "execution_count": 25
        }
      ],
      "source": [
        "data"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "_cA86t80Gtqn",
        "outputId": "c4a1a3a3-2cd8-4850-e2c5-ea47ff52546b"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "{'num_nodes': 496265, 'x': tensor([[ 0.0402,  1.2863,  0.2783,  0.0402],\n",
              "        [ 0.2898, -0.3607, -1.4947,  0.2898],\n",
              "        [ 0.3797, -0.0113,  0.4846,  0.3797],\n",
              "        ...,\n",
              "        [ 0.2898, -0.4605, -1.4947,  0.2898],\n",
              "        [-0.1596,  1.2863,  0.0732, -0.1596],\n",
              "        [-0.6090, -0.0612,  1.1030, -0.6090]])}"
            ]
          },
          "metadata": {},
          "execution_count": 11
        }
      ],
      "source": [
        "data[\"user\"]"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 8,
      "metadata": {
        "id": "RAkjmm416Z7b"
      },
      "outputs": [],
      "source": [
        "# 5. Define GraphSAGE Model\n",
        "class GNNEncoder(torch.nn.Module):\n",
        "    def __init__(self, hidden_channels):\n",
        "        super().__init__()\n",
        "        self.conv1 = SAGEConv((-1, -1), hidden_channels)\n",
        "        self.relu = nn.ReLU()\n",
        "        self.conv2 = SAGEConv((-1, -1), hidden_channels)\n",
        "\n",
        "    def forward(self, x_dict, edge_index_dict):\n",
        "        x = self.conv1(x_dict, edge_index_dict)\n",
        "        x = self.relu(x)\n",
        "        x = self.conv2(x, edge_index_dict)\n",
        "        return x"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 9,
      "metadata": {
        "id": "vlqw42dIQgZA"
      },
      "outputs": [],
      "source": [
        "class MLPPredictor(nn.Module):\n",
        "    def __init__(self, embedding_dim):\n",
        "        super().__init__()\n",
        "        self.fc1 = nn.Linear(embedding_dim * 2, 128)\n",
        "        self.fc2 = nn.Linear(128, 64)\n",
        "        self.fc3 = nn.Linear(64, 1)\n",
        "\n",
        "    def forward(self, user_emb, wine_emb):\n",
        "        x = torch.cat([user_emb, wine_emb], dim=-1)\n",
        "        x = F.relu(self.fc1(x))\n",
        "        x = F.relu(self.fc2(x))\n",
        "        return self.fc3(x).squeeze(-1)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 14,
      "metadata": {
        "id": "HB_YDQMZ6d1H"
      },
      "outputs": [],
      "source": [
        "# 7. Prepare train/val split (temporal or random)\n",
        "edge_index = data['user', 'rates', 'wine'].edge_index\n",
        "num_edges = edge_index.size(1)\n",
        "split_idx = int(0.9 * num_edges)\n",
        "\n",
        "train_edge_index = edge_index[:, :split_idx]\n",
        "val_edge_index = edge_index[:, split_idx:]\n",
        "\n",
        "data['user', 'rates', 'wine'].edge_index = train_edge_index\n",
        "\n",
        "# Opt\n",
        "data['wine', 'rev_rates', 'user'].edge_index = data['user', 'rates', 'wine'].edge_index[[1, 0]]\n",
        "\n",
        "data['user', 'rates', 'wine'].train_edge_index = train_edge_index\n",
        "\n",
        "data['user', 'rates', 'wine'].val_edge_index = val_edge_index"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 15,
      "metadata": {
        "id": "QlOzZTtG6JLi"
      },
      "outputs": [],
      "source": [
        "# 8. Create loader for training\n",
        "train_loader = LinkNeighborLoader(\n",
        "    data,\n",
        "    num_neighbors=[25, 10],\n",
        "    batch_size=8192,\n",
        "    edge_label_index=(\"user\", \"rates\", \"wine\"),\n",
        "    edge_label=torch.tensor(reviews['Rating'].values[:split_idx], dtype=torch.float),\n",
        "    shuffle=True\n",
        ")\n",
        "\n",
        "val_loader = LinkNeighborLoader(\n",
        "    data=data,\n",
        "    num_neighbors=[25, 10],\n",
        "    batch_size=8192,\n",
        "    edge_label_index=(('user', 'rates', 'wine'), val_edge_index),\n",
        "    edge_label=torch.tensor(reviews['Rating'].values[split_idx:], dtype=torch.float),\n",
        "    shuffle=False\n",
        ")"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "encoder = GNNEncoder(hidden_channels=64)\n",
        "model = to_hetero(encoder, data.metadata(), aggr='sum').to(device)#\n",
        "predictor = MLPPredictor(64).to(device)\n",
        "\n",
        "optimizer = torch.optim.Adam(list(model.parameters()) + list(predictor.parameters()), lr=0.01)\n",
        "\n",
        "model.train()\n",
        "predictor.train()\n",
        "\n",
        "for epoch in range(3):\n",
        "    total_loss = 0\n",
        "    for batch in tqdm(train_loader):\n",
        "        batch = batch.to(device)\n",
        "        optimizer.zero_grad()\n",
        "\n",
        "        # Forward pass\n",
        "        z_dict = model(batch.x_dict, batch.edge_index_dict)\n",
        "\n",
        "        # Get the user and wine nodes involved in the prediction task\n",
        "        user_id = batch[\"user\", \"rates\", \"wine\"].edge_label_index[0]\n",
        "        wine_id = batch[\"user\", \"rates\", \"wine\"].edge_label_index[1]\n",
        "\n",
        "        # Fetch their embeddings\n",
        "        user_emb = z_dict['user'][user_id]\n",
        "        wine_emb = z_dict['wine'][wine_id]\n",
        "\n",
        "        # Predict ratings with MLP\n",
        "        pred = predictor(user_emb, wine_emb)\n",
        "\n",
        "        # Compute loss\n",
        "        target = batch[\"user\", \"rates\", \"wine\"].edge_label.squeeze().float()\n",
        "        loss = F.mse_loss(pred, target)\n",
        "\n",
        "        loss.backward()\n",
        "        optimizer.step()\n",
        "        total_loss += loss.item()\n",
        "\n",
        "    print(f\"Epoch {epoch}, Loss: {total_loss:.4f}\")\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "3xHgQv0KFszF",
        "outputId": "0bb788dd-407e-4098-a2b6-b01c3c63ff50"
      },
      "execution_count": 15,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "100%|██████████| 1859/1859 [12:05<00:00,  2.56it/s]\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Epoch 0, Loss: 733.1331\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "100%|██████████| 1859/1859 [12:06<00:00,  2.56it/s]\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Epoch 1, Loss: 645.4640\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "100%|██████████| 1859/1859 [12:05<00:00,  2.56it/s]"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Epoch 2, Loss: 637.1822\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "data"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "kkUEL_7QSooC",
        "outputId": "db4e8f96-e6d1-4dae-b0da-2b196c22fd4e"
      },
      "execution_count": 39,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "HeteroData(\n",
              "  user={\n",
              "    num_nodes=1056035,\n",
              "    x=[1056035, 4],\n",
              "  },\n",
              "  wine={\n",
              "    num_nodes=98825,\n",
              "    x=[98825, 482],\n",
              "  },\n",
              "  (user, rates, wine)={\n",
              "    edge_index=[2, 15226104],\n",
              "    edge_attr=[16917894, 1],\n",
              "    train_edge_index=[2, 15226104],\n",
              "    val_edge_index=[2, 1691790],\n",
              "  },\n",
              "  (wine, rev_rates, user)={ edge_index=[2, 15226104] }\n",
              ")"
            ]
          },
          "metadata": {},
          "execution_count": 39
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Load previously stored models\n",
        "data = torch.load(pl.Path(\"/content/drive/MyDrive/01_Master/WebMiningProject/full_3_data.pth\"), weights_only=False)\n",
        "\n",
        "encoder = GNNEncoder(hidden_channels=64)\n",
        "model = to_hetero(encoder, data.metadata(), aggr='sum').to(device)#\n",
        "model.load_state_dict(torch.load(pl.Path(\"/content/drive/MyDrive/01_Master/WebMiningProject/full_3_model.pth\"), weights_only=True))\n",
        "\n",
        "predictor = MLPPredictor(64).to(device)\n",
        "predictor.load_state_dict(torch.load(pl.Path(\"/content/drive/MyDrive/01_Master/WebMiningProject/full_3_predictor.pth\"), weights_only=True))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "gjx4nta6Gqqy",
        "outputId": "22d7ad60-ce22-4703-d10e-13c8a70c58ea"
      },
      "execution_count": 12,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<All keys matched successfully>"
            ]
          },
          "metadata": {},
          "execution_count": 12
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#torch.save(model.state_dict(), pl.Path(\"/content/drive/MyDrive/01_Master/WebMiningProject\") / \"full_3_model.pth\")\n",
        "#torch.save(predictor.state_dict(), pl.Path(\"/content/drive/MyDrive/01_Master/WebMiningProject\") / \"full_3_predictor.pth\")\n",
        "#torch.save(data, pl.Path(\"/content/drive/MyDrive/01_Master/WebMiningProject\") / \"full_3_data.pth\")"
      ],
      "metadata": {
        "id": "0lVYHoaybxGY"
      },
      "execution_count": 19,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "original_data = copy.deepcopy(data)"
      ],
      "metadata": {
        "id": "9CQu5kibSOBr"
      },
      "execution_count": 16,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "model.eval()\n",
        "predictor.eval()\n",
        "\n",
        "total_loss = 0\n",
        "all_preds = []\n",
        "all_targets = []\n",
        "\n",
        "with torch.no_grad():\n",
        "    for batch in tqdm(val_loader):  # LinkNeighborLoader for val edges\n",
        "        batch = batch.to(device)\n",
        "        z_dict = model(batch.x_dict, batch.edge_index_dict)\n",
        "\n",
        "        user_id = batch[\"user\", \"rates\", \"wine\"].edge_label_index[0]\n",
        "        wine_id = batch[\"user\", \"rates\", \"wine\"].edge_label_index[1]\n",
        "\n",
        "        user_emb = z_dict['user'][user_id]\n",
        "        wine_emb = z_dict['wine'][wine_id]\n",
        "\n",
        "        preds = predictor(user_emb, wine_emb)\n",
        "        targets = batch[\"user\", \"rates\", \"wine\"].edge_label.squeeze().float()\n",
        "\n",
        "        loss = F.mse_loss(preds, targets)\n",
        "        total_loss += loss.item() * preds.size(0)\n",
        "\n",
        "        all_preds.append(preds.cpu())\n",
        "        all_targets.append(targets.cpu())\n",
        "\n",
        "avg_loss = total_loss / len(val_loader.dataset)\n",
        "rmse = torch.sqrt(torch.tensor(avg_loss))\n",
        "print(f\"Validation RMSE: {rmse.item():.4f}\")\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "JFnj7_1vLRmh",
        "outputId": "f06a4b22-9d0a-41d0-a8c5-95895a2f69f8"
      },
      "execution_count": 17,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "100%|██████████| 186/186 [01:00<00:00,  3.07it/s]"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Validation RMSE: 0.6512\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "## Evaluation on Test segments"
      ],
      "metadata": {
        "id": "Q6dkZwMsNme-"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "csv_testset_warm_user_warm_item = pl.Path(\"/content/drive/MyDrive/01_Master/WebMiningProject/testset_warm_user_warm_item.csv\")\n",
        "csv_testset_warm_user_cold_item = pl.Path(\"/content/drive/MyDrive/01_Master/WebMiningProject/testset_warm_user_cold_item.csv\")\n",
        "csv_testset_cold_user_warm_item = pl.Path(\"/content/drive/MyDrive/01_Master/WebMiningProject/testset_cold_user_warm_item.csv\")\n",
        "csv_testset_cold_user_cold_item = pl.Path(\"/content/drive/MyDrive/01_Master/WebMiningProject/testset_cold_user_cold_item.csv\")\n",
        "\n",
        "testset_warm_user_warm_item = pd.read_csv(csv_testset_warm_user_warm_item)\n",
        "testset_warm_user_cold_item = pd.read_csv(csv_testset_warm_user_cold_item)\n",
        "testset_cold_user_warm_item = pd.read_csv(csv_testset_cold_user_warm_item)\n",
        "testset_cold_user_cold_item = pd.read_csv(csv_testset_cold_user_cold_item)\n",
        "\n",
        "\n",
        "test_segments = [testset_warm_user_warm_item, testset_warm_user_cold_item, testset_cold_user_warm_item, testset_cold_user_cold_item]"
      ],
      "metadata": {
        "id": "SXgMC-tZNuoX"
      },
      "execution_count": 55,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "def process_new_wines(new_wine_ids, wine_df, wine_encoder, training_metadata_columns):\n",
        "    # Filter new wines\n",
        "    new_wine_df = wine_df[wine_df['WineID'].isin(new_wine_ids)].copy()\n",
        "\n",
        "    # Map using existing encoder\n",
        "    next_wine_index = len(original_wine_id_to_index)\n",
        "\n",
        "    for wid in new_wine_ids:\n",
        "        if wid not in wine_id_to_index:\n",
        "            wine_id_to_index[wid] = next_wine_index\n",
        "            next_wine_index += 1\n",
        "\n",
        "    grape_tensor = compute_grape_embeddings(new_wine_df)\n",
        "\n",
        "    # Step 2: Encode metadata using one-hot encoding aligned to training columns\n",
        "    selected_columns = ['Type', 'Elaborate', 'Body', 'Acidity', 'Country']\n",
        "    metadata = new_wine_df.set_index('WineID')[selected_columns]\n",
        "    metadata_encoded = pd.get_dummies(metadata).astype(float)\n",
        "\n",
        "    # Align with training columns (fill missing with 0)\n",
        "    metadata_encoded = metadata_encoded.reindex(columns=training_metadata_columns, fill_value=0.0)\n",
        "    structured_tensor = torch.tensor(metadata_encoded.values, dtype=torch.float)\n",
        "\n",
        "    # Step 3: Concatenate grape and structured features\n",
        "    combined_features = torch.cat([grape_tensor, structured_tensor], dim=1)\n",
        "\n",
        "    return combined_features\n"
      ],
      "metadata": {
        "id": "C6tiCR_lMX3O"
      },
      "execution_count": 56,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# Alignment bug when it comes to the Loader Function -> Wine Encoding probably\n",
        "\n",
        "# for handling unknown users and items later on\n",
        "original_user_id_to_index = {id_: idx for idx, id_ in enumerate(user_encoder.classes_)}\n",
        "original_wine_id_to_index = {id_: idx for idx, id_ in enumerate(wine_encoder.classes_)}\n",
        "\n",
        "for segment_id, segment_df in enumerate(test_segments):\n",
        "    print(f\"Evaluating Segment {segment_id}...\")\n",
        "\n",
        "    # Step 1: Reset graph and ID mappings\n",
        "    data = copy.deepcopy(original_data)\n",
        "    user_id_to_index = copy.deepcopy(original_user_id_to_index)\n",
        "    wine_id_to_index = copy.deepcopy(original_wine_id_to_index)\n",
        "\n",
        "    # Step 2: Detect new user and wine IDs\n",
        "    new_user_ids = segment_df['UserID'][~segment_df['UserID'].isin(user_id_to_index)].unique()\n",
        "    print(f\"new users in test segment: {len(new_user_ids)}\")\n",
        "\n",
        "    new_wine_ids = segment_df['WineID'][~segment_df['WineID'].isin(wine_id_to_index)].unique()\n",
        "    print(f\"new wines in test segment: {len(new_wine_ids)}\")\n",
        "    new_wine_combined_features = process_new_wines(new_wine_ids, all_wines, wine_encoder, training_wine_metadata_columns)\n",
        "    print(f\"shape of new wine features {new_wine_combined_features.shape}\")\n",
        "\n",
        "    # Step 3: Assign new indices (continue from current num_nodes)\n",
        "    current_user_count = data['user'].num_nodes\n",
        "    current_wine_count = data['wine'].num_nodes\n",
        "\n",
        "    for uid in new_user_ids:\n",
        "        user_id_to_index[uid] = current_user_count\n",
        "        current_user_count += 1\n",
        "\n",
        "    for wid in new_wine_ids:\n",
        "        wine_id_to_index[wid] = current_wine_count\n",
        "        current_wine_count += 1\n",
        "\n",
        "    # Step 4: Extend feature matrices for new nodes\n",
        "    num_new_users = current_user_count - data['user'].num_nodes\n",
        "    num_new_wines = current_wine_count - data['wine'].num_nodes\n",
        "\n",
        "    user_feat_dim = data['user'].x.size(1)\n",
        "    wine_feat_dim = data['wine'].x.size(1)\n",
        "\n",
        "    # no metadata for users therefore zeros\n",
        "    new_user_feats = torch.zeros((num_new_users, user_feat_dim), dtype=torch.float, device=data['user'].x.device)\n",
        "    new_wine_feats = torch.tensor(new_wine_combined_features, dtype=torch.float, device=data['wine'].x.device)\n",
        "    print(f\"new_wine_feats: {new_wine_feats}\")\n",
        "    if new_wine_feats.size(0) > 0:\n",
        "      data['wine'].x = torch.cat([data['wine'].x, new_wine_feats], dim=0)\n",
        "\n",
        "    if new_user_feats.size(0) > 0:\n",
        "      data['user'].x = torch.cat([data['user'].x, new_user_feats], dim=0)\n",
        "\n",
        "    data['user'].num_nodes = current_user_count\n",
        "    data['wine'].num_nodes = current_wine_count\n",
        "\n",
        "\n",
        "    # Construct test edges\n",
        "    user_indices = torch.tensor([user_id_to_index[uid] for uid in segment_df['UserID']], dtype=torch.long)\n",
        "    wine_indices = torch.tensor([wine_id_to_index[wid] for wid in segment_df['WineID']], dtype=torch.long)\n",
        "    ratings = torch.tensor(segment_df['Rating'].values, dtype=torch.float)\n",
        "\n",
        "    test_edge_index = torch.stack([user_indices, wine_indices], dim=0)\n",
        "\n",
        "    test_loader = LinkNeighborLoader(\n",
        "        data=data,\n",
        "        num_neighbors=[25, 10],\n",
        "        edge_label_index=(('user', 'rates', 'wine'), test_edge_index),\n",
        "        edge_label=torch.tensor(ratings, dtype=torch.float),\n",
        "        batch_size=1024,\n",
        "        shuffle=False\n",
        "    )\n",
        "\n",
        "    model.eval()\n",
        "    predictor.eval()\n",
        "    preds = []\n",
        "    trues = []\n",
        "\n",
        "    with torch.no_grad():\n",
        "        for batch in tqdm(test_loader):\n",
        "            batch = batch.to(device)\n",
        "            z_dict = model(batch.x_dict, batch.edge_index_dict)\n",
        "\n",
        "            user_id = batch[\"user\", \"rates\", \"wine\"].edge_label_index[0]\n",
        "            wine_id = batch[\"user\", \"rates\", \"wine\"].edge_label_index[1]\n",
        "\n",
        "            user_emb = z_dict['user'][user_id]\n",
        "            wine_emb = z_dict['wine'][wine_id]\n",
        "\n",
        "            pred = predictor(user_emb, wine_emb)\n",
        "            preds.append(pred.cpu())\n",
        "            trues.append(batch[\"user\", \"rates\", \"wine\"].edge_label.cpu())\n",
        "\n",
        "    preds = torch.cat(preds)\n",
        "    trues = torch.cat(trues)\n",
        "\n",
        "    rmse = torch.sqrt(F.mse_loss(preds, trues))\n",
        "    print(f\"Segment {segment_id} RMSE: {rmse:.4f}\")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 1000,
          "referenced_widgets": [
            "f5a57ed4f19f4bdd87e0ccc40a524873",
            "51a103b56f524a898c96c98ad174258c",
            "9d2ad799bfef4a5d8fd1fbb82029acbf",
            "e7bffffbc796451a99facee5895061bc",
            "33029ef185254fb4bc30bd8a0a7dc6ab",
            "8522674ce756476799bf8c7bfd758cd9",
            "309304338ba1464db39e6132db1d5b55",
            "0952776489f7400caad8940056a5be0c",
            "9328b088bb3f409bbdb8dd1727ede5a5",
            "f2ef6ee280f34132baba70ad1790a761",
            "02a0d59b74ce432884fc9bb64e1630c2",
            "5e823b1770f644bb9137551009f44696",
            "947e28937cb8448bb134b0ed406c1335",
            "ae8a4bfd3afb4cd2a5f5267ed874d9f9",
            "d07de8a10eed4efd9e62a200aa268ddd",
            "f4d7e32cd2ad46adb49f13e7cdb697b5",
            "867c62f7ceac4abe8d117c1f7cf18775",
            "49af8ca0c5c344ecbb5742ac78f040e9",
            "031cea3cf56b44ee835d47a28e05dc02",
            "7c038f3ac4c24b8c8be57b5d86d2cdbe",
            "3307c94351a14f2d95c20d586ece81af",
            "878b019b0bd84a3aa600ba7bb3b1f7c3",
            "80364faec047494c8d8fc6847fdfb728",
            "3ea6372a9220486a977974114c4f819f",
            "0c7ce75a667b4516b8d1f497ee2475a6",
            "ffbc74bb213043058cf709bca9f5a14d",
            "a109b4a915c9466e8004a2914a6f69e4",
            "203b54f7a57541bcb64a7ad26cd8b6b8",
            "3d87cf15bef3481498b823e1cbbe5757",
            "037fd3337b114c0b95e4319f18546975",
            "a2fe2aba05da45919164b87f493faead",
            "f869a30fb69f4b678a54fd260feb80e4",
            "b39a5a1d2a8246068f4e021b8b0f2447",
            "5175806c3e0741f491b68c42af471095",
            "c79cd23c7cde4f36a2880551b8ef535c",
            "d31ed1169d4541d5acae9606bd20b33b",
            "eeb63ba9cbb645fe9e7a62f09ecce6d0",
            "28e8841457b549648260a1a14ae3fbee",
            "6c4825ec18e7490eb35a35aa1cc9898d",
            "65c94fcf9fe6405fb5b0503a54174b51",
            "e82a5e1b94834a16b651dd1f40988b11",
            "f036a0176dc248debd166f476dc54f8f",
            "1975684396c64c42864e75f8ecdd6655",
            "9317f589affd46bba2de0e1c0d3e26d2"
          ]
        },
        "id": "fINXinjBRv7y",
        "outputId": "d06ba63c-f78a-4c80-e8af-ea663f0c17dd"
      },
      "execution_count": 57,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Evaluating Segment 0...\n",
            "new users in test segment: 5\n",
            "new wines in test segment: 0\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "Batches: 0it [00:00, ?it/s]"
            ],
            "application/vnd.jupyter.widget-view+json": {
              "version_major": 2,
              "version_minor": 0,
              "model_id": "f5a57ed4f19f4bdd87e0ccc40a524873"
            }
          },
          "metadata": {}
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "shape of new wine features torch.Size([0, 98])\n",
            "new_wine_feats: tensor([], size=(0, 98))\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "<ipython-input-57-77fbbbdc3cc4>:45: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).\n",
            "  new_wine_feats = torch.tensor(new_wine_combined_features, dtype=torch.float, device=data['wine'].x.device)\n",
            "<ipython-input-57-77fbbbdc3cc4>:68: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).\n",
            "  edge_label=torch.tensor(ratings, dtype=torch.float),\n",
            "100%|██████████| 1990/1990 [04:39<00:00,  7.11it/s]\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Segment 0 RMSE: 0.7509\n",
            "Evaluating Segment 1...\n",
            "new users in test segment: 1\n",
            "new wines in test segment: 1321\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "Batches:   0%|          | 0/42 [00:00<?, ?it/s]"
            ],
            "application/vnd.jupyter.widget-view+json": {
              "version_major": 2,
              "version_minor": 0,
              "model_id": "5e823b1770f644bb9137551009f44696"
            }
          },
          "metadata": {}
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "shape of new wine features torch.Size([1321, 482])\n",
            "new_wine_feats: tensor([[ 0.0246, -0.0006, -0.1046,  ...,  0.0000,  0.0000,  0.0000],\n",
            "        [-0.0056, -0.0242, -0.0746,  ...,  0.0000,  0.0000,  0.0000],\n",
            "        [-0.0056, -0.0242, -0.0746,  ...,  0.0000,  0.0000,  0.0000],\n",
            "        ...,\n",
            "        [-0.0263,  0.0835, -0.0324,  ...,  0.0000,  0.0000,  0.0000],\n",
            "        [-0.0132, -0.0630, -0.0744,  ...,  0.0000,  0.0000,  0.0000],\n",
            "        [-0.0410,  0.0567, -0.1049,  ...,  0.0000,  0.0000,  0.0000]])\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "<ipython-input-57-77fbbbdc3cc4>:45: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).\n",
            "  new_wine_feats = torch.tensor(new_wine_combined_features, dtype=torch.float, device=data['wine'].x.device)\n",
            "<ipython-input-57-77fbbbdc3cc4>:68: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).\n",
            "  edge_label=torch.tensor(ratings, dtype=torch.float),\n",
            "100%|██████████| 35/35 [00:03<00:00, 10.53it/s]\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Segment 1 RMSE: 1.3150\n",
            "Evaluating Segment 2...\n",
            "new users in test segment: 1\n",
            "new wines in test segment: 0\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "Batches: 0it [00:00, ?it/s]"
            ],
            "application/vnd.jupyter.widget-view+json": {
              "version_major": 2,
              "version_minor": 0,
              "model_id": "80364faec047494c8d8fc6847fdfb728"
            }
          },
          "metadata": {}
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "shape of new wine features torch.Size([0, 98])\n",
            "new_wine_feats: tensor([], size=(0, 98))\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "<ipython-input-57-77fbbbdc3cc4>:45: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).\n",
            "  new_wine_feats = torch.tensor(new_wine_combined_features, dtype=torch.float, device=data['wine'].x.device)\n",
            "<ipython-input-57-77fbbbdc3cc4>:68: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).\n",
            "  edge_label=torch.tensor(ratings, dtype=torch.float),\n",
            "100%|██████████| 495/495 [01:06<00:00,  7.47it/s]\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Segment 2 RMSE: 1.2237\n",
            "Evaluating Segment 3...\n",
            "new users in test segment: 44\n",
            "new wines in test segment: 1515\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "Batches:   0%|          | 0/48 [00:00<?, ?it/s]"
            ],
            "application/vnd.jupyter.widget-view+json": {
              "version_major": 2,
              "version_minor": 0,
              "model_id": "5175806c3e0741f491b68c42af471095"
            }
          },
          "metadata": {}
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "shape of new wine features torch.Size([1515, 482])\n",
            "new_wine_feats: tensor([[ 0.0246, -0.0006, -0.1046,  ...,  0.0000,  0.0000,  0.0000],\n",
            "        [-0.0056, -0.0242, -0.0746,  ...,  0.0000,  0.0000,  0.0000],\n",
            "        [-0.0056, -0.0242, -0.0746,  ...,  0.0000,  0.0000,  0.0000],\n",
            "        ...,\n",
            "        [-0.0047,  0.1094, -0.0786,  ...,  0.0000,  0.0000,  0.0000],\n",
            "        [-0.0410,  0.0567, -0.1049,  ...,  0.0000,  0.0000,  0.0000],\n",
            "        [ 0.0434, -0.0570, -0.0825,  ...,  0.0000,  0.0000,  0.0000]])\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "<ipython-input-57-77fbbbdc3cc4>:45: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).\n",
            "  new_wine_feats = torch.tensor(new_wine_combined_features, dtype=torch.float, device=data['wine'].x.device)\n",
            "<ipython-input-57-77fbbbdc3cc4>:68: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).\n",
            "  edge_label=torch.tensor(ratings, dtype=torch.float),\n",
            "100%|██████████| 17/17 [00:01<00:00, 12.29it/s]"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Segment 3 RMSE: 1.4782\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "print(user_indices)\n",
        "print(wine_indices)\n",
        "print(ratings)\n",
        "print(test_edge_index)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "-CawFDTydo3G",
        "outputId": "844fdd52-1478-425d-89c3-bbf36b54d159"
      },
      "execution_count": 34,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "tensor([ 840559,   61576,  305883,  ...,  967035, 1000261, 1018508])\n",
            "tensor([ 98825,  98826,  98827,  ...,  99997, 100322, 100093])\n",
            "tensor([5.0000, 5.0000, 3.5000,  ..., 5.0000, 4.0000, 4.0000])\n",
            "tensor([[ 840559,   61576,  305883,  ...,  967035, 1000261, 1018508],\n",
            "        [  98825,   98826,   98827,  ...,   99997,  100322,  100093]])\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "for user_id, uid in user_id_to_index.items():\n",
        "  if uid == 1018508:\n",
        "    print(f\"real user_id: {user_id}, user_id in graph strut {uid}\")\n",
        "for wine_id, wid in wine_id_to_index.items():\n",
        "  if wid == 100093:\n",
        "    print(wine_id, wid)\n",
        "\n",
        "print(user_id_to_index[1846409])\n",
        "print(wine_id_to_index[105703])"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "JimvNfR0d6Ip",
        "outputId": "2ca01d34-7a55-40a7-84ac-99456551d760"
      },
      "execution_count": 51,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "real user_id: 2025644, user_id in graph strut 1018508\n",
            "165970 100093\n",
            "840559\n",
            "98825\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "testset_cold_user_cold_item.loc[testset_cold_user_cold_item['UserID'] == 2025644]"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 81
        },
        "id": "FdXQOrAceuOt",
        "outputId": "58635fd5-4341-4f6a-be88-6251d8270e29"
      },
      "execution_count": 52,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "       RatingID   UserID  WineID Vintage  Rating                 Date\n",
              "16503  15236817  2025644  165970    2017     4.0  2021-01-03 13:33:05"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-fb9954ca-d834-4ad7-bc14-d93f5fbf0c1f\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>RatingID</th>\n",
              "      <th>UserID</th>\n",
              "      <th>WineID</th>\n",
              "      <th>Vintage</th>\n",
              "      <th>Rating</th>\n",
              "      <th>Date</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>16503</th>\n",
              "      <td>15236817</td>\n",
              "      <td>2025644</td>\n",
              "      <td>165970</td>\n",
              "      <td>2017</td>\n",
              "      <td>4.0</td>\n",
              "      <td>2021-01-03 13:33:05</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-fb9954ca-d834-4ad7-bc14-d93f5fbf0c1f')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-fb9954ca-d834-4ad7-bc14-d93f5fbf0c1f button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-fb9954ca-d834-4ad7-bc14-d93f5fbf0c1f');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "repr_error": "0"
            }
          },
          "metadata": {},
          "execution_count": 52
        }
      ]
    }
  ],
  "metadata": {
    "accelerator": "GPU",
    "colab": {
      "gpuType": "L4",
      "machine_shape": "hm",
      "provenance": [],
      "mount_file_id": "1H2EI_QddKFEm3iGjyV37lDf-hBRXa057",
      "authorship_tag": "ABX9TyMw0hCv4ZfksJswuKSXD+gG",
      "include_colab_link": true
    },
    "kernelspec": {
      "display_name": "Python 3",
      "name": "python3"
    },
    "language_info": {
      "name": "python"
    },
    "widgets": {
      "application/vnd.jupyter.widget-state+json": {
        "5eeb111b618149f48eb5e9bd6b466bef": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HBoxModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "HBoxModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "HBoxView",
            "box_style": "",
            "children": [
              "IPY_MODEL_341e4e21d92f49f4a4798d4deb8d6b06",
              "IPY_MODEL_fb6e330babe6469ea2270f7dc5d20a76",
              "IPY_MODEL_8f0c8ff2004e4ec796d0430848e08ef4"
            ],
            "layout": "IPY_MODEL_22b6b0f6ccdb406b8469b599b24e74e1"
          }
        },
        "341e4e21d92f49f4a4798d4deb8d6b06": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HTMLModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "HTMLModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "HTMLView",
            "description": "",
            "description_tooltip": null,
            "layout": "IPY_MODEL_79bb0a1a883a49eb8ad6843d29ca596c",
            "placeholder": "​",
            "style": "IPY_MODEL_22361464297545febb8b302a1761541f",
            "value": "Batches: 100%"
          }
        },
        "fb6e330babe6469ea2270f7dc5d20a76": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "FloatProgressModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "FloatProgressModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "ProgressView",
            "bar_style": "success",
            "description": "",
            "description_tooltip": null,
            "layout": "IPY_MODEL_9fa89f450dff40e2b8c0c0b3134dd393",
            "max": 3089,
            "min": 0,
            "orientation": "horizontal",
            "style": "IPY_MODEL_6fdf6079a50d4e6da0b14aa788d0601d",
            "value": 3089
          }
        },
        "8f0c8ff2004e4ec796d0430848e08ef4": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HTMLModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "HTMLModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "HTMLView",
            "description": "",
            "description_tooltip": null,
            "layout": "IPY_MODEL_09834038938e4de486b13ffa43a74265",
            "placeholder": "​",
            "style": "IPY_MODEL_28c8f92895af4222b05d5a9bfc00e5cb",
            "value": " 3089/3089 [00:22&lt;00:00, 135.81it/s]"
          }
        },
        "22b6b0f6ccdb406b8469b599b24e74e1": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "79bb0a1a883a49eb8ad6843d29ca596c": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "22361464297545febb8b302a1761541f": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "DescriptionStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "DescriptionStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "description_width": ""
          }
        },
        "9fa89f450dff40e2b8c0c0b3134dd393": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "6fdf6079a50d4e6da0b14aa788d0601d": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "ProgressStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "ProgressStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "bar_color": null,
            "description_width": ""
          }
        },
        "09834038938e4de486b13ffa43a74265": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "28c8f92895af4222b05d5a9bfc00e5cb": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "DescriptionStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "DescriptionStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "description_width": ""
          }
        },
        "f5a57ed4f19f4bdd87e0ccc40a524873": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HBoxModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "HBoxModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "HBoxView",
            "box_style": "",
            "children": [
              "IPY_MODEL_51a103b56f524a898c96c98ad174258c",
              "IPY_MODEL_9d2ad799bfef4a5d8fd1fbb82029acbf",
              "IPY_MODEL_e7bffffbc796451a99facee5895061bc"
            ],
            "layout": "IPY_MODEL_33029ef185254fb4bc30bd8a0a7dc6ab"
          }
        },
        "51a103b56f524a898c96c98ad174258c": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HTMLModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "HTMLModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "HTMLView",
            "description": "",
            "description_tooltip": null,
            "layout": "IPY_MODEL_8522674ce756476799bf8c7bfd758cd9",
            "placeholder": "​",
            "style": "IPY_MODEL_309304338ba1464db39e6132db1d5b55",
            "value": "Batches: "
          }
        },
        "9d2ad799bfef4a5d8fd1fbb82029acbf": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "FloatProgressModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "FloatProgressModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "ProgressView",
            "bar_style": "success",
            "description": "",
            "description_tooltip": null,
            "layout": "IPY_MODEL_0952776489f7400caad8940056a5be0c",
            "max": 1,
            "min": 0,
            "orientation": "horizontal",
            "style": "IPY_MODEL_9328b088bb3f409bbdb8dd1727ede5a5",
            "value": 0
          }
        },
        "e7bffffbc796451a99facee5895061bc": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HTMLModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "HTMLModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "HTMLView",
            "description": "",
            "description_tooltip": null,
            "layout": "IPY_MODEL_f2ef6ee280f34132baba70ad1790a761",
            "placeholder": "​",
            "style": "IPY_MODEL_02a0d59b74ce432884fc9bb64e1630c2",
            "value": " 0/0 [00:00&lt;?, ?it/s]"
          }
        },
        "33029ef185254fb4bc30bd8a0a7dc6ab": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "8522674ce756476799bf8c7bfd758cd9": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "309304338ba1464db39e6132db1d5b55": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "DescriptionStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "DescriptionStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "description_width": ""
          }
        },
        "0952776489f7400caad8940056a5be0c": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": "20px"
          }
        },
        "9328b088bb3f409bbdb8dd1727ede5a5": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "ProgressStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "ProgressStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "bar_color": null,
            "description_width": ""
          }
        },
        "f2ef6ee280f34132baba70ad1790a761": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "02a0d59b74ce432884fc9bb64e1630c2": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "DescriptionStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "DescriptionStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "description_width": ""
          }
        },
        "5e823b1770f644bb9137551009f44696": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HBoxModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "HBoxModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "HBoxView",
            "box_style": "",
            "children": [
              "IPY_MODEL_947e28937cb8448bb134b0ed406c1335",
              "IPY_MODEL_ae8a4bfd3afb4cd2a5f5267ed874d9f9",
              "IPY_MODEL_d07de8a10eed4efd9e62a200aa268ddd"
            ],
            "layout": "IPY_MODEL_f4d7e32cd2ad46adb49f13e7cdb697b5"
          }
        },
        "947e28937cb8448bb134b0ed406c1335": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HTMLModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "HTMLModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "HTMLView",
            "description": "",
            "description_tooltip": null,
            "layout": "IPY_MODEL_867c62f7ceac4abe8d117c1f7cf18775",
            "placeholder": "​",
            "style": "IPY_MODEL_49af8ca0c5c344ecbb5742ac78f040e9",
            "value": "Batches: 100%"
          }
        },
        "ae8a4bfd3afb4cd2a5f5267ed874d9f9": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "FloatProgressModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "FloatProgressModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "ProgressView",
            "bar_style": "success",
            "description": "",
            "description_tooltip": null,
            "layout": "IPY_MODEL_031cea3cf56b44ee835d47a28e05dc02",
            "max": 42,
            "min": 0,
            "orientation": "horizontal",
            "style": "IPY_MODEL_7c038f3ac4c24b8c8be57b5d86d2cdbe",
            "value": 42
          }
        },
        "d07de8a10eed4efd9e62a200aa268ddd": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HTMLModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "HTMLModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "HTMLView",
            "description": "",
            "description_tooltip": null,
            "layout": "IPY_MODEL_3307c94351a14f2d95c20d586ece81af",
            "placeholder": "​",
            "style": "IPY_MODEL_878b019b0bd84a3aa600ba7bb3b1f7c3",
            "value": " 42/42 [00:00&lt;00:00, 135.82it/s]"
          }
        },
        "f4d7e32cd2ad46adb49f13e7cdb697b5": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "867c62f7ceac4abe8d117c1f7cf18775": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "49af8ca0c5c344ecbb5742ac78f040e9": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "DescriptionStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "DescriptionStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "description_width": ""
          }
        },
        "031cea3cf56b44ee835d47a28e05dc02": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "7c038f3ac4c24b8c8be57b5d86d2cdbe": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "ProgressStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "ProgressStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "bar_color": null,
            "description_width": ""
          }
        },
        "3307c94351a14f2d95c20d586ece81af": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "878b019b0bd84a3aa600ba7bb3b1f7c3": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "DescriptionStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "DescriptionStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "description_width": ""
          }
        },
        "80364faec047494c8d8fc6847fdfb728": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HBoxModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "HBoxModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "HBoxView",
            "box_style": "",
            "children": [
              "IPY_MODEL_3ea6372a9220486a977974114c4f819f",
              "IPY_MODEL_0c7ce75a667b4516b8d1f497ee2475a6",
              "IPY_MODEL_ffbc74bb213043058cf709bca9f5a14d"
            ],
            "layout": "IPY_MODEL_a109b4a915c9466e8004a2914a6f69e4"
          }
        },
        "3ea6372a9220486a977974114c4f819f": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HTMLModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "HTMLModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "HTMLView",
            "description": "",
            "description_tooltip": null,
            "layout": "IPY_MODEL_203b54f7a57541bcb64a7ad26cd8b6b8",
            "placeholder": "​",
            "style": "IPY_MODEL_3d87cf15bef3481498b823e1cbbe5757",
            "value": "Batches: "
          }
        },
        "0c7ce75a667b4516b8d1f497ee2475a6": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "FloatProgressModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "FloatProgressModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "ProgressView",
            "bar_style": "success",
            "description": "",
            "description_tooltip": null,
            "layout": "IPY_MODEL_037fd3337b114c0b95e4319f18546975",
            "max": 1,
            "min": 0,
            "orientation": "horizontal",
            "style": "IPY_MODEL_a2fe2aba05da45919164b87f493faead",
            "value": 0
          }
        },
        "ffbc74bb213043058cf709bca9f5a14d": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HTMLModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "HTMLModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "HTMLView",
            "description": "",
            "description_tooltip": null,
            "layout": "IPY_MODEL_f869a30fb69f4b678a54fd260feb80e4",
            "placeholder": "​",
            "style": "IPY_MODEL_b39a5a1d2a8246068f4e021b8b0f2447",
            "value": " 0/0 [00:00&lt;?, ?it/s]"
          }
        },
        "a109b4a915c9466e8004a2914a6f69e4": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "203b54f7a57541bcb64a7ad26cd8b6b8": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "3d87cf15bef3481498b823e1cbbe5757": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "DescriptionStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "DescriptionStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "description_width": ""
          }
        },
        "037fd3337b114c0b95e4319f18546975": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": "20px"
          }
        },
        "a2fe2aba05da45919164b87f493faead": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "ProgressStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "ProgressStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "bar_color": null,
            "description_width": ""
          }
        },
        "f869a30fb69f4b678a54fd260feb80e4": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "b39a5a1d2a8246068f4e021b8b0f2447": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "DescriptionStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "DescriptionStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "description_width": ""
          }
        },
        "5175806c3e0741f491b68c42af471095": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HBoxModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "HBoxModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "HBoxView",
            "box_style": "",
            "children": [
              "IPY_MODEL_c79cd23c7cde4f36a2880551b8ef535c",
              "IPY_MODEL_d31ed1169d4541d5acae9606bd20b33b",
              "IPY_MODEL_eeb63ba9cbb645fe9e7a62f09ecce6d0"
            ],
            "layout": "IPY_MODEL_28e8841457b549648260a1a14ae3fbee"
          }
        },
        "c79cd23c7cde4f36a2880551b8ef535c": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HTMLModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "HTMLModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "HTMLView",
            "description": "",
            "description_tooltip": null,
            "layout": "IPY_MODEL_6c4825ec18e7490eb35a35aa1cc9898d",
            "placeholder": "​",
            "style": "IPY_MODEL_65c94fcf9fe6405fb5b0503a54174b51",
            "value": "Batches: 100%"
          }
        },
        "d31ed1169d4541d5acae9606bd20b33b": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "FloatProgressModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "FloatProgressModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "ProgressView",
            "bar_style": "success",
            "description": "",
            "description_tooltip": null,
            "layout": "IPY_MODEL_e82a5e1b94834a16b651dd1f40988b11",
            "max": 48,
            "min": 0,
            "orientation": "horizontal",
            "style": "IPY_MODEL_f036a0176dc248debd166f476dc54f8f",
            "value": 48
          }
        },
        "eeb63ba9cbb645fe9e7a62f09ecce6d0": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HTMLModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "HTMLModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "HTMLView",
            "description": "",
            "description_tooltip": null,
            "layout": "IPY_MODEL_1975684396c64c42864e75f8ecdd6655",
            "placeholder": "​",
            "style": "IPY_MODEL_9317f589affd46bba2de0e1c0d3e26d2",
            "value": " 48/48 [00:00&lt;00:00, 140.25it/s]"
          }
        },
        "28e8841457b549648260a1a14ae3fbee": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "6c4825ec18e7490eb35a35aa1cc9898d": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "65c94fcf9fe6405fb5b0503a54174b51": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "DescriptionStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "DescriptionStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "description_width": ""
          }
        },
        "e82a5e1b94834a16b651dd1f40988b11": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "f036a0176dc248debd166f476dc54f8f": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "ProgressStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "ProgressStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "bar_color": null,
            "description_width": ""
          }
        },
        "1975684396c64c42864e75f8ecdd6655": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "9317f589affd46bba2de0e1c0d3e26d2": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "DescriptionStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "DescriptionStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "description_width": ""
          }
        }
      }
    }
  },
  "nbformat": 4,
  "nbformat_minor": 0
}